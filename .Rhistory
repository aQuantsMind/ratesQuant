path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
#to exercise option of early repayment in period t, we owe the outstanding principal in t-1 plus the (mortgage) interest accrued during period t
disc_principal=L_t[i-1]+L_t[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*step_size*path[k])*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
if (k == (i-1)){
disc_coupon = exp(-1 * step_size * path[k]) * coupon
}
else{
disc_coupon = exp(-1 * step_size * path[k]) * disc_coupon
}
}
value_mortgage= value_mortgage+disc_coupon
}
}
}
estimate <- value_mortgage
return(estimate - target_mortgage_value)
}
x <- replicate(100,simulate_mortgage(rate_mbs=0.0827565691))
x
simulate_mortgage <- function(rate_mbs, int_tree=int_treeM,par=100000, step_size=0.5){
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(nodes_N-1))
L_t <- c()
L_t <- PrincipalScheduleFunc(coupon=coupon,L_0 = 100000,r=rate_mbs,step_size = 0.5,maturity_T = nodes_N-1)
mortgage_tree = find_bond_price(int_tree=int_treeM, maturity_T = nodes_N-1,coupon=coupon,par=0,tree=T)
exercise_tree = find_mortgage_price(mortgage_tree=mortgage_tree,coupon = coupon,principal_schedule=L_t,int_tree = int_treeM,tree = T)
values_mortgage <- c()
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:nodes_N){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
#to exercise option of early repayment in period t, we owe the outstanding principal in t-1 plus the (mortgage) interest accrued during period t
disc_principal=L_t[i-1]+L_t[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*step_size*path[k])*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
if (k == (i-1)){
disc_coupon = exp(-1 * step_size * path[k]) * coupon
}
else{
disc_coupon = exp(-1 * step_size * path[k]) * disc_coupon
}
}
value_mortgage= value_mortgage+disc_coupon
}
}
}
estimate <- value_mortgage
return(estimate - target_mortgage_value)
}
x <- replicate(100,simulate_mortgage(rate_mbs=0.0827565691))
x
target_mortgage_value = 100000
par=100000
int_tree = int_treeM
maturity_T = 20
nodes_N = maturity_T + 1
simulate_mortgage <- function(rate_mbs, int_tree=int_treeM,par=100000, step_size=0.5){
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(nodes_N-1))
L_t <- c()
L_t <- PrincipalScheduleFunc(coupon=coupon,L_0 = 100000,r=rate_mbs,step_size = 0.5,maturity_T = nodes_N-1)
mortgage_tree = find_bond_price(int_tree=int_treeM, maturity_T = nodes_N-1,coupon=coupon,par=0,tree=T)
exercise_tree = find_mortgage_price(mortgage_tree=mortgage_tree,coupon = coupon,principal_schedule=L_t,int_tree = int_treeM,tree = T)
values_mortgage <- c()
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:nodes_N){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
#to exercise option of early repayment in period t, we owe the outstanding principal in t-1 plus the (mortgage) interest accrued during period t
disc_principal=L_t[i-1]+L_t[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*step_size*path[k])*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
if (k == (i-1)){
disc_coupon = exp(-1 * step_size * path[k]) * coupon
}
else{
disc_coupon = exp(-1 * step_size * path[k]) * disc_coupon
}
}
value_mortgage= value_mortgage+disc_coupon
}
}
}
estimate <- value_mortgage
return(estimate - target_mortgage_value)
}
conf <- function(rate_mbs=0.0827565691){
while (idx < 10000){
x[idx] <- simulate_mortgage(rate_mbs)
idx=idx+1}
return(x)
}
conf(rate_mbs = 0.0827565691)
simulate_mortgage <- function(rate_mbs, int_tree=int_treeM, n=100000,par=100000, step_size=0.5){
path <- vector()
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(nodes_N-1))
L_t <- c()
L_t <- PrincipalScheduleFunc(coupon=coupon,L_0 = 100000,r=rate_mbs,step_size = 0.5,maturity_T = nodes_N-1)
mortgage_tree = find_bond_price(int_tree=int_treeM, maturity_T = nodes_N-1,coupon=coupon,par=0,tree=T)
exercise_tree = find_mortgage_price(mortgage_tree=mortgage_tree,coupon = coupon,principal_schedule=L_t,int_tree = int_treeM,tree = T)
values_mortgage <- c()
for(j in 1:n){
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:nodes_N){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
#to exercise option of early repayment in period t, we owe the outstanding principal in t-1 plus the (mortgage) interest accrued during period t
disc_principal=L_t[i-1]+L_t[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*step_size*path[k])*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
if (k == (i-1)){
disc_coupon = exp(-1 * step_size * path[k]) * coupon
}
else{
disc_coupon = exp(-1 * step_size * path[k]) * disc_coupon
}
}
value_mortgage= value_mortgage+disc_coupon
}
}
}
values_mortgage[j]=value_mortgage
}
values_mortgage_df <- as.data.frame(values_mortgage)
mortgage_value_estimate <- mean(values_mortgage_df[,1])
return(mortgage_value_estimate)
}
conf <- function(rate_mbs=0.0827565691){
while (idx < 10000){
x[idx] <- simulate_mortgage(rate_mbs)
idx=idx+1}
return(x)
}
conf <- function(rate_mbs=0.0827565691){
while (idx < 10){
x[idx] <- simulate_mortgage(rate_mbs)
idx=idx+1}
return(x)
}
conf()
simulate_mortgage <- function(rate_mbs, int_tree=int_treeM, n=100000,par=100000, step_size=0.5){
path <- vector()
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(nodes_N-1))
L_t <- c()
L_t <- PrincipalScheduleFunc(coupon=coupon,L_0 = 100000,r=rate_mbs,step_size = 0.5,maturity_T = nodes_N-1)
mortgage_tree = find_bond_price(int_tree=int_treeM, maturity_T = nodes_N-1,coupon=coupon,par=0,tree=T)
exercise_tree = find_mortgage_price(mortgage_tree=mortgage_tree,coupon = coupon,principal_schedule=L_t,int_tree = int_treeM,tree = T)
values_mortgage <- c()
for(j in 1:n){
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:nodes_N){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
#to exercise option of early repayment in period t, we owe the outstanding principal in t-1 plus the (mortgage) interest accrued during period t
disc_principal=L_t[i-1]+L_t[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*step_size*path[k])*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
if (k == (i-1)){
disc_coupon = exp(-1 * step_size * path[k]) * coupon
}
else{
disc_coupon = exp(-1 * step_size * path[k]) * disc_coupon
}
}
value_mortgage= value_mortgage+disc_coupon
}
}
}
values_mortgage[j]=value_mortgage
}
values_mortgage_df <- as.data.frame(values_mortgage)
mortgage_value_estimate <- mean(values_mortgage_df[,1])
return(mortgage_value_estimate)
}
target_mortgage_value = 100000
simulate_mortgage(rate_mbs=0.0827565691)
conf <- function(rate_mbs=0.0827565691){
while (idx < 10){
x[idx] <- simulate_mortgage(rate_mbs)
idx=idx+1}
return(x)
}
conf()
x <- conf(rate_mbs = 0.0827565691)
idx=1
x <- c()
conf <- function(rate_mbs=0.0827565691){
while (idx < 10){
x[idx] <- simulate_mortgage(rate_mbs)
idx=idx+1}
return(x)
}
conf(rate_mbs=0.0827565691)
simulate_mortgage <- function(rate_mbs, int_tree=int_treeM, n=100000,par=100000, step_size=0.5){
path <- vector()
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(nodes_N-1))
L_t <- c()
L_t <- PrincipalScheduleFunc(coupon=coupon,L_0 = 100000,r=rate_mbs,step_size = 0.5,maturity_T = nodes_N-1)
mortgage_tree = find_bond_price(int_tree=int_treeM, maturity_T = nodes_N-1,coupon=coupon,par=0,tree=T)
exercise_tree = find_mortgage_price(mortgage_tree=mortgage_tree,coupon = coupon,principal_schedule=L_t,int_tree = int_treeM,tree = T)
values_mortgage <- c()
for(j in 1:n){
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:nodes_N){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
#to exercise option of early repayment in period t, we owe the outstanding principal in t-1 plus the (mortgage) interest accrued during period t
disc_principal=L_t[i-1]+L_t[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*step_size*path[k])*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
if (k == (i-1)){
disc_coupon = exp(-1 * step_size * path[k]) * coupon
}
else{
disc_coupon = exp(-1 * step_size * path[k]) * disc_coupon
}
}
value_mortgage= value_mortgage+disc_coupon
}
}
}
values_mortgage[j]=value_mortgage
}
values_mortgage_df <- as.data.frame(values_mortgage)
}
simulate_mortgage(find_mortgage_price <- function(mortgage_tree,coupon,principal_schedule, int_tree, tree=F){
american_tree <- matrix(nrow=maturity_T, ncol=maturity_T)
exercise_tree <- matrix(0, nrow = nodes_N, ncol = nodes_N)
for (j in (maturity_T):1){
for (i in j:1){
if(j != (maturity_T)){
if(j!= 1){
wait = exp(-1*step_size*int_tree[i,j])*((.5*(american_tree[i,j+1]+american_tree[i+1,j+1])))
exercise = max(mortgage_tree[i,j] - principal_schedule[j],0)
american_tree[i,j] = max(wait,exercise)
if(exercise > wait){
exercise_tree[i,j]=1
}
}
else{
american_tree[i,j] = exp(-1*step_size*int_tree[i,j])*((0.5*(american_tree[i,j+1]+american_tree[i+1,j+1])))
}
}
else{
#by definition, wait and exercise value are 0 in the lats period. hence, option's value is 0
american_tree[i,j] = 0
}
}
}
if(tree){
return(exercise_tree)
}
return(mortgage_tree[1,1] - american_tree[1,1])
}
simulate_mortgage <- function(rate_mbs, int_tree=int_treeM, n=100000,par=100000, step_size=0.5){
simulate_mortgage <- function(rate_mbs, int_tree=int_treeM, n=100000,par=100000, step_size=0.5){
path <- vector()
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(nodes_N-1))
L_t <- c()
L_t <- PrincipalScheduleFunc(coupon=coupon,L_0 = 100000,r=rate_mbs,step_size = 0.5,maturity_T = nodes_N-1)
mortgage_tree = find_bond_price(int_tree=int_treeM, maturity_T = nodes_N-1,coupon=coupon,par=0,tree=T)
exercise_tree = find_mortgage_price(mortgage_tree=mortgage_tree,coupon = coupon,principal_schedule=L_t,int_tree = int_treeM,tree = T)
values_mortgage <- c()
for(j in 1:n){
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:nodes_N){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
#to exercise option of early repayment in period t, we owe the outstanding principal in t-1 plus the (mortgage) interest accrued during period t
disc_principal=L_t[i-1]+L_t[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*step_size*path[k])*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
if (k == (i-1)){
disc_coupon = exp(-1 * step_size * path[k]) * coupon
}
else{
disc_coupon = exp(-1 * step_size * path[k]) * disc_coupon
}
}
value_mortgage= value_mortgage+disc_coupon
}
}
}
values_mortgage[j]=value_mortgage
}
values_mortgage_df <- as.data.frame(values_mortgage)
}
x <- simulate_mortgage(rate_mbs = 0.0827565691)
x
mean(x)
x
is.data.frame(x)
mean(x[,1])
source("~/R_quant/rates quant_MBS modelling/veronesi/ratesQuant/monte carlo mortgage valuation.R")
x <- simulate_mortgage(rate_mbs = 0.0827508787624396)
mean(x[,1])
simulate_mortgage <- function(rate_mbs, int_tree=int_treeM, n=100000,par=100000, step_size=0.5){
path <- vector()
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(nodes_N-1))
L_t <- c()
L_t <- PrincipalScheduleFunc(coupon=coupon,L_0 = 100000,r=rate_mbs,step_size = 0.5,maturity_T = nodes_N-1)
mortgage_tree = find_bond_price(int_tree=int_treeM, maturity_T = nodes_N-1,coupon=coupon,par=0,tree=T)
exercise_tree = find_mortgage_price(mortgage_tree=mortgage_tree,coupon = coupon,principal_schedule=L_t,int_tree = int_treeM,tree = T)
values_mortgage <- c()
for(j in 1:n){
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:nodes_N){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
#to exercise option of early repayment in period t, we owe the outstanding principal in t-1 plus the (mortgage) interest accrued during period t
disc_principal=L_t[i-1]+L_t[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*step_size*path[k])*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
if (k == (i-1)){
disc_coupon = exp(-1 * step_size * path[k]) * coupon
}
else{
disc_coupon = exp(-1 * step_size * path[k]) * disc_coupon
}
}
value_mortgage= value_mortgage+disc_coupon
}
}
}
values_mortgage[j]=value_mortgage
}
values_mortgage_df <- as.data.frame(values_mortgage)
}
x <- 0.0827508787624396
xdf <- simulate_mortgage(rate_mbs = x)
xdf
mean(xdf[1])
mean(xdf[,1])
xdf <- simulate_mortgage(rate_mbs = x)
mean(xdf[,1])
xdf <- simulate_mortgage(rate_mbs = x)
xdf
xdf <- simulate_mortgage(rate_mbs = x)
xdf[,1]
mean(xdf[,1])
xdf <- simulate_mortgage(rate_mbs = x)
mean(xdf[,1])
xdf <- simulate_mortgage(rate_mbs = x)
xdf[,1]
mean(xdf[,1])
xdf <- simulate_mortgage(rate_mbs = x)
mean(xdf[,1])
#re-evaluate mortgage value. in other words, show that the mortgage is issued at par if the mortgage rate amounts to the rate found above.
r_mortgage <- result$root
r_mortgage
simulate_mortgage <- function(rate_mbs, int_tree=int_treeM, n=100000,par=100000, step_size=0.5){
path <- vector()
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(nodes_N-1))
L_t <- c()
L_t <- PrincipalScheduleFunc(coupon=coupon,L_0 = 100000,r=rate_mbs,step_size = 0.5,maturity_T = nodes_N-1)
mortgage_tree = find_bond_price(int_tree=int_treeM, maturity_T = nodes_N-1,coupon=coupon,par=0,tree=T)
exercise_tree = find_mortgage_price(mortgage_tree=mortgage_tree,coupon = coupon,principal_schedule=L_t,int_tree = int_treeM,tree = T)
values_mortgage <- c()
for(j in 1:n){
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:nodes_N){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
#to exercise option of early repayment in period t, we owe the outstanding principal in t-1 plus the (mortgage) interest accrued during period t
disc_principal=L_t[i-1]+L_t[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*step_size*path[k])*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
if (k == (i-1)){
disc_coupon = exp(-1 * step_size * path[k]) * coupon
}
else{
disc_coupon = exp(-1 * step_size * path[k]) * disc_coupon
}
}
value_mortgage= value_mortgage+disc_coupon
}
}
}
values_mortgage[j]=value_mortgage
}
values_mortgage_df <- as.data.frame(values_mortgage)
}
mortgage_value_point_estimate <- mean(mortgage_value_df[,1])
source("monte carlo_confidence interval.R")
N=100000
mortgage_value_point_estimate <- mean(mortgage_value_df[,1])
std_error <- sd(mortgage_value_df[,1])/sqrt(N)
print(paste("confidence interval ranges from",rate_mbs-2*std_error,"to",rate_mbs+2*sttd_error))
print(paste("confidence interval ranges from",rate_mbs-2*std_error,"to",rate_mbs+2*std_error))
sd(mortgage_value_df[,1])
sqrt(N)
3600/316
par=100000
print(paste("confidence interval ranges from",par-2*std_error,"to",par+2*std_error))
print(paste("the point estimate for our mortgage value is",mortgage_value_point_estimate))
print(paste("confidence interval ranges from",mortgage_value_point_estimate-2*std_error,"to",mortgage_value_point_estimate+2*std_error))
getwd()
setwd("simulating interest rate path")
file.create("simulating interest rate path.R")
file.edit("simulating interest rate path.R")
?runif
