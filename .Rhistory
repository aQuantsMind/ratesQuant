L_t <- PrincipalScheduleFunc(coupon=coupon,L_0 = 100000,r=rate_mbs,step_size = 0.5,num_period = num_periods)
mortgage_tree = find_bond_price(int_tree=int_treeM, num_period = num_periods,coupon=coupon,par=0,tree=T)
exercise_tree = find_mortgage_price(mortgage_tree=mortgage_tree,coupon = coupon,principal_schedule=L_t,int_tree = int_treeM,tree = T)
value_mortgage <- c()
for(j in 1:n){
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:num_periods){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
disc_principal=L_t[i-1]+L_t[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*step_size*path[k]/100)*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
disc_coupon=exp(-1*step_size*path[k]/100)*coupon
}
value_mortgage= value_mortgage+disc_coupon
}
}
}
value_mortgage[j]=value_mortgage
}
return(value_mortgage)
}
target_mortgage_value
diff_func_montecarlo <- function(r){
return(simulate_mortgage(rate_mbs=r,int_tree=int_treeM) - target_mortgage_value)
}
result <- uniroot(diff_func_montecarlo, interval = c(0.001, 0.2))  # You can adjust the interval based on your problem domain
diff_func_montecarlo(rate_mbs=0.07564,int_tree=int_treeM)
simulate_mortgage(rate_mbs=0.07564,int_tree=int_treeM)
simulate_mortgage <- function(int_tree, rate_mbs, n=10000,par=100000, step_size=0.5){
path <- vector()
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(num_periods))
L_t <- c()
L_t <- PrincipalScheduleFunc(coupon=coupon,L_0 = 100000,r=rate_mbs,step_size = 0.5,num_period = num_periods)
mortgage_tree = find_bond_price(int_tree=int_treeM, num_period = num_periods,coupon=coupon,par=0,tree=T)
exercise_tree = find_mortgage_price(mortgage_tree=mortgage_tree,coupon = coupon,principal_schedule=L_t,int_tree = int_treeM,tree = T)
value_mortgage <- c()
for(j in 1:n){
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:num_periods){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
disc_principal=L_t[i-1]+L_t[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*step_size*path[k]/100)*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
disc_coupon=exp(-1*step_size*path[k]/100)*coupon
}
value_mortgage= value_mortgage+disc_coupon
}
}
}
value_mortgage[j]=value_mortgage
}
return(value_mortgage)
}
target_mortgage_value
diff_func_montecarlo <- function(r){
return(simulate_mortgage(rate_mbs=r,int_tree=int_treeM) - target_mortgage_value)
}
result <- uniroot(diff_func_montecarlo, interval = c(0.001, 0.2))  # You can adjust the interval based on your problem domain
value_mortgage
length(value_mortgage)
simulate_mortgage <- function(int_tree, rate_mbs, n=1000,par=100000, step_size=0.5){
path <- vector()
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(num_periods))
L_t <- c()
L_t <- PrincipalScheduleFunc(coupon=coupon,L_0 = 100000,r=rate_mbs,step_size = 0.5,num_period = num_periods)
mortgage_tree = find_bond_price(int_tree=int_treeM, num_period = num_periods,coupon=coupon,par=0,tree=T)
exercise_tree = find_mortgage_price(mortgage_tree=mortgage_tree,coupon = coupon,principal_schedule=L_t,int_tree = int_treeM,tree = T)
value_mortgage <- c()
for(j in 1:n){
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:num_periods){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
disc_principal=L_t[i-1]+L_t[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*step_size*path[k]/100)*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
disc_coupon=exp(-1*step_size*path[k]/100)*coupon
}
value_mortgage= value_mortgage+disc_coupon
}
}
}
value_mortgage[j]=value_mortgage
}
return(value_mortgage)
}
target_mortgage_value
diff_func_montecarlo <- function(r){
return(simulate_mortgage(rate_mbs=r,int_tree=int_treeM) - target_mortgage_value)
}
result <- uniroot(diff_func_montecarlo, interval = c(0.001, 0.2))  # You can adjust the interval based on your problem domain
debug(simulate_int_rate())
debug(simulate_int_rate
)
debug(simulate_int_rate)
debug(simulate_int_rate())
int_tree = int_treeM
n = 10
num_periods
simulate_mortgage <- function(int_tree, rate_mbs, n=1000,par=100000, step_size=0.5){
path <- vector()
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(num_periods))
L_t <- c()
L_t <- PrincipalScheduleFunc(coupon=coupon,L_0 = 100000,r=rate_mbs,step_size = 0.5,num_period = num_periods)
mortgage_tree = find_bond_price(int_tree=int_treeM, num_period = num_periods,coupon=coupon,par=0,tree=T)
exercise_tree = find_mortgage_price(mortgage_tree=mortgage_tree,coupon = coupon,principal_schedule=L_t,int_tree = int_treeM,tree = T)
value_mortgage <- c()
for(j in 1:n){
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:num_periods){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
disc_principal=L_t[i-1]+L_t[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*step_size*path[k]/100)*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
disc_coupon=exp(-1*step_size*path[k]/100)*coupon
}
value_mortgage= value_mortgage+disc_coupon
}
}
}
value_mortgage[j]=value_mortgage
}
return(value_mortgage)
}
debug(simulate_mortgage())
debug(simulate_mortgage
()
)
debug(simulate_mortgage)
debug(simulate_mortgage())
rate_mbs = 0.07564
n=10
coupon
L_t
length(L_t)
numb_periods = 10
mortgage_tree[1,1]
View(exercise_tree)
debug(simulate_mortgage())
debug(simulate_mortgage())
rate_mbs = 0.07564
rm(int_tree)
int_tree = int_treeM
n=10
value_mortgage
simulate_mortgage <- function(int_tree, rate_mbs, n=1000,par=100000, step_size=0.5){
path <- vector()
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(num_periods))
L_t <- c()
L_t <- PrincipalScheduleFunc(coupon=coupon,L_0 = 100000,r=rate_mbs,step_size = 0.5,num_period = num_periods)
mortgage_tree = find_bond_price(int_tree=int_treeM, num_period = num_periods,coupon=coupon,par=0,tree=T)
exercise_tree = find_mortgage_price(mortgage_tree=mortgage_tree,coupon = coupon,principal_schedule=L_t,int_tree = int_treeM,tree = T)
value_mortgage <- c()
for(j in 1:n){
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:num_periods){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
disc_principal=L_t[i-1]+L_t[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*step_size*path[k]/100)*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
disc_coupon=exp(-1*step_size*path[k]/100)*coupon
}
value_mortgage= value_mortgage+disc_coupon
}
}
}
value_mortgage[j]=value_mortgage
}
return(value_mortgage)
}
simulate_mortgage <- function(int_tree, rate_mbs, n=1000,par=100000, step_size=0.5){
path <- vector()
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(num_periods))
L_t <- c()
L_t <- PrincipalScheduleFunc(coupon=coupon,L_0 = 100000,r=rate_mbs,step_size = 0.5,num_period = num_periods)
mortgage_tree = find_bond_price(int_tree=int_treeM, num_period = num_periods,coupon=coupon,par=0,tree=T)
exercise_tree = find_mortgage_price(mortgage_tree=mortgage_tree,coupon = coupon,principal_schedule=L_t,int_tree = int_treeM,tree = T)
values_mortgage <- c()
for(j in 1:n){
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:num_periods){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
disc_principal=L_t[i-1]+L_t[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*step_size*path[k]/100)*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
disc_coupon=exp(-1*step_size*path[k]/100)*coupon
}
value_mortgage= value_mortgage+disc_coupon
}
}
}
values_mortgage[j]=value_mortgage
}
return(value_mortgage)
}
simulate_mortgage(int_tree = int_treeM, rate_mbs = 0.07564, n=10)
simulate_mortgage(int_tree = int_treeM, rate_mbs = 0.08, n=10)
simulate_mortgage(int_tree = int_treeM, rate_mbs = 0.06, n=10)
simulate_mortgage(int_tree = int_treeM, rate_mbs = 0.04, n=10)
simulate_mortgage(int_tree = int_treeM, rate_mbs = 0.07564, n=10000)
simulate_mortgage(int_tree = int_treeM, rate_mbs = 0.07564, n=1000000)
source("~/R_quant/rates quant_MBS modelling/veronesi/ratesQuant/find_mortgage_rate.R")
num_periods
num_periods = 10
simulate_mortgage <- function(int_tree, rate_mbs, n=10000,par=100000, step_size=0.5){
path <- vector()
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(num_periods))
L_t <- c()
L_t <- PrincipalScheduleFunc(coupon=coupon,L_0 = 100000,r=rate_mbs,step_size = 0.5,num_period = num_periods)
mortgage_tree = find_bond_price(int_tree=int_treeM, num_period = num_periods,coupon=coupon,par=0,tree=T)
exercise_tree = find_mortgage_price(mortgage_tree=mortgage_tree,coupon = coupon,principal_schedule=L_t,int_tree = int_treeM,tree = T)
values_mortgage <- c()
for(j in 1:n){
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:num_periods){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
disc_principal=L_t[i-1]+L_t[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*step_size*path[k]/100)*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
disc_coupon=exp(-1*step_size*path[k]/100)*coupon
}
value_mortgage= value_mortgage+disc_coupon
}
}
}
values_mortgage[j]=value_mortgage
}
return(value_mortgage)
}
debug(simulate_mortgage)
debug(simulate_mortgage())
simulate_mortgage(int_tree = int_treeM, rate_mbs = 0.07564, n=10000,par = 100000, step_size = 0.5)
simulate_mortgage(int_tree = int_treeM, rate_mbs = 0.07564, n=10000,par = 100000, step_size = 0.5)
num_periods
#Function that can price a MBS
simulate_mortgage <- function(int_tree, rate_mbs, n=100000){
path <- vector()
coupon=par*(rat_mbs/2)/(1-1/(1+(rate_mbs/2))^(num_periods-1))
principal_schedule <- vector()
principal_schedule[1] = par
for(i in 2:(num_periods-1)){
principal_schedule[i]=principal_schedule[i-1]-coupon+principal_schedule[i-1]*(rate_mbs/2)
}
mortgage_tree = obtain_bond_price(bdt,num_periods - 1, coupon,0,T)
exercise_tree = obtain_mortgage_price(principal_schedule,coupon,bdt,T)
values_mortgage <- vector()
for(j in 1:n){
row=1
path[1]=bdt[1,1]
paid=F
value_mortgage=0
for (i in 2:num_periods){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=bdt[row,i]
if(exercise_tree[row,i]>0){
disc_principal=principal_schedule[i-1]+principal_schedule[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*period*path[k]/100)*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
disc_coupon=exp(-1*period*path[k]/100)*coupon
}
}
}
value_mortgage[j]=value_mortgage
}
}
return(value_mortgage)
}
simulate_mortgage(int_tree = int_treeM,rate_mbs=0.07564,n=10000)
#Function that can price a MBS
simulate_mortgage <- function(int_tree, rate_mbs, n=100000){
path <- vector()
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(num_periods-1))
principal_schedule <- vector()
principal_schedule[1] = par
for(i in 2:(num_periods-1)){
principal_schedule[i]=principal_schedule[i-1]-coupon+principal_schedule[i-1]*(rate_mbs/2)
}
mortgage_tree = obtain_bond_price(bdt,num_periods - 1, coupon,0,T)
exercise_tree = obtain_mortgage_price(principal_schedule,coupon,bdt,T)
values_mortgage <- vector()
for(j in 1:n){
row=1
path[1]=bdt[1,1]
paid=F
value_mortgage=0
for (i in 2:num_periods){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=bdt[row,i]
if(exercise_tree[row,i]>0){
disc_principal=principal_schedule[i-1]+principal_schedule[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*period*path[k]/100)*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
disc_coupon=exp(-1*period*path[k]/100)*coupon
}
}
}
value_mortgage[j]=value_mortgage
}
}
return(value_mortgage)
}
simulate_mortgage(int_tree = int_treeM,rate_mbs=0.07564,n=10000)
period = 0.5
simulate_mortgage(int_tree = int_treeM,rate_mbs=0.07564,n=10000)
#Function that can price a MBS
simulate_mortgage <- function(int_tree, rate_mbs, n=100000){
path <- vector()
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(num_periods-1))
principal_schedule <- vector()
principal_schedule[1] = par
for(i in 2:(num_periods-1)){
principal_schedule[i]=principal_schedule[i-1]-coupon+principal_schedule[i-1]*(rate_mbs/2)
}
mortgage_tree = obtain_bond_price(int_tree,num_periods - 1, coupon,0,T)
exercise_tree = obtain_mortgage_price(principal_schedule,coupon,int_tree,T)
values_mortgage <- vector()
for(j in 1:n){
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:num_periods){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
disc_principal=principal_schedule[i-1]+principal_schedule[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*period*path[k]/100)*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
disc_coupon=exp(-1*period*path[k]/100)*coupon
}
}
}
value_mortgage[j]=value_mortgage
}
}
return(value_mortgage)
}
simulate_mortgage(int_tree = int_treeM,rate_mbs = 0.07564,n=10000)
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(num_periods-1))
coupon
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(num_periods))
coupon
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(num_periods-1))
coupon
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(num_periods))
coupon
#Function that can price a MBS
simulate_mortgage <- function(int_tree, rate_mbs, n=100000){
path <- vector()
coupon=par*(rate_mbs/2)/(1-1/(1+(rate_mbs/2))^(num_periods-1))
principal_schedule <- vector()
principal_schedule[1] = par
for(i in 2:(num_periods-1)){
principal_schedule[i]=principal_schedule[i-1]-coupon+principal_schedule[i-1]*(rate_mbs/2)
}
mortgage_tree = obtain_bond_price(int_tree,num_periods - 1, coupon,0,T)
exercise_tree = obtain_mortgage_price(principal_schedule,coupon,int_tree,T)
values_mortgage <- vector()
for(j in 1:n){
row=1
path[1]=int_tree[1,1]
paid=F
value_mortgage=0
for (i in 2:num_periods){
if(!paid){
if(runif(1)>.5){
row=row+1
}
path[i]=int_tree[row,i]
if(exercise_tree[row,i]>0){
disc_principal=principal_schedule[i-1]+principal_schedule[i-1]*(rate_mbs/2)
for(k in (i-1):1){
disc_principal=exp(-1*period*path[k]/100)*disc_principal
}
value_mortgage=value_mortgage+disc_principal
paid=T
}
else{
for (k in (i-1):1){
disc_coupon=exp(-1*period*path[k]/100)*coupon
}
}
}
value_mortgage[j]=value_mortgage
}
}
return(value_mortgage)
}
